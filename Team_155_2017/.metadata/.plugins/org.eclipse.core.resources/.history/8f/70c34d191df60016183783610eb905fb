package org.usfirst.frc.team155.robot;

import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.I2C.Port;

public class pixyCamVision {

	// Warning: if the pixy is plugged in through mini usb, this code WILL NOT
	// WORK b/c the pixy is smart and detects where it should send data
	
	I2C pixy;
	Port port = Port.kOnboard;
	PixyPacket[] packets; // prep up the array of PixyPacket - KB
	PixyException pExc;
	String print;

	public pixyCamVision() {
		pixy = new I2C(port, 0x54);
		packets = new PixyPacket[7]; // fill array with 7 PixyPackets - KB
		pExc = new PixyException(print);
	}

	// This method parses raw data from the pixy into readable integers
	public int cvt(byte upper, byte lower) {
		return (((int) upper & 0xff) << 8) | ((int) lower & 0xff);
	}

	// This method gathers data, then parses that data, and assigns the ints to
	// global variables
	// sure would be nice if function prototypes were followed..... KB
	// INPUT: -KB
	// -signature -KB
	// OUTPUT: -KB
	// returns a pixypacket on target #signature -KB
	
	public void readPacket(int Signature) throws PixyException {
		int Checksum;
		int Sig, j;
		int blockCount = 0;

		byte[] rawData = new byte[130]; // 32 //set up an array of bytes, grab
										// an
										// array of bytes from pixy -KB
		try {
			if (pixy.readOnly(rawData, 130)) { // 32
			}
		} catch (RuntimeException e) {
		}

		if (rawData.length < 130) { // 32
			System.out.println("byte array length is broken");
			return;
		}
		for (int i = 0; i < 129; i++) { // 32
			j = 0;
			int syncWord = cvt(rawData[i + 1], rawData[i + 0]); // Parse first 2 bytes
			//System.out.println(" i,syncWord = " + i + "," + syncWord);
			
			if (syncWord == 0xaa55) { // Check is first 2 bytes equal a
										// "sync word", which indicates the
										// start of a packet of valid data
				System.out.println("syncWord found = " + i + " " + syncWord);
				syncWord = cvt(rawData[i + 3], rawData[i + 2]); // Parse the
																// next 2 bytes
				//System.out.println("syncWord found = " + i + " " + syncWord);
				if (syncWord != 0xaa55) { // Shifts everything in the case that
					System.out.println("second syncWord not found "); // one
																		// syncword
																		// is
																		// sent
					j = 2; // decrement by 2, but why.... - KB
				} else {
					j = 0;
					System.out.println("second syncWord found = " + i + " " + syncWord);
				}
				// This next block parses the rest of the data
				Checksum = cvt(rawData[i + 5 - j], rawData[i + 4 - j]); // grab
				System.out.println("blockCount = " + blockCount);														// the
				// checksum for
				// the pixy data
				System.out.println("Checksum = " + Checksum);
				Sig = cvt(rawData[i + 7 - j], rawData[i + 6 - j]); // Sig is the
				// Signature number
				// from the Pixycam
				System.out.println("Sig = " + Sig);
				if (Sig <= 0 || Sig > packets.length) {
					break;
				}
				packets[blockCount] = new PixyPacket(); // make a new object in
														// the
														// array - KB

				packets[blockCount].X = cvt(rawData[i + 9 - j], rawData[i + 8 - j]); // fill
																				// it
																				// with
																				// data
																				// -KB
				System.out.println("packets[blockCount].X = " + packets[blockCount].X);
				packets[blockCount].Y = cvt(rawData[i + 11 - j], rawData[i + 10	- j]); // fill
				// it
				// with
				// data
				// -KB
				System.out.println("packets[blockCount].Y = " + packets[blockCount].Y);
				packets[blockCount].Width = cvt(rawData[i + 13 - j], rawData[i
						+ 12 - j]); // fill
				// it
				// with
				// data
				// -KB
				System.out.println("packets[blockCount].Width = " + packets[blockCount].Width);
				packets[blockCount].Height = cvt(rawData[i + 15 - j], rawData[i
						+ 14 - j]); // fill
				// it
				// with
				// data
				// -KB
				System.out.println("packets[blockCount].Height = " + packets[blockCount].Height);
				// Compute distance to object

				// Distance=Target(ft- 2 inches wide- 2/12)*FOV(pix -
				// 320)/(2*Target(pix)*tangent(FOV 75degrees by 47 degrees))
				packets[blockCount].Distance = (int) (packets[blockCount].Width
						/ 12 * 320 / (2 * packets[blockCount].X) * 3.732);
				// System.out.println("packets[Sig - 1].Distance = "
				// + packets[Sig - 1].Distance);

				// Checks whether the data is valid using the checksum *This if
				// block should never be entered*
				if (Checksum != Sig + packets[blockCount].X
						+ packets[blockCount].Y + packets[blockCount].Width
						+ packets[blockCount].Height) {
					packets[blockCount] = null; // checksum failed, set position
												// to
												// array to null and throw
												// exception - KB
					throw pExc;
				}

				blockCount++;
				// break;
			}
		}
		// Assigns our packet to a temp packet, then deletes data so that we
		// don't return old data
		// PixyPacket pkt = packets[Signature - 1];
		// packets[blockCount] = null;
	}

	public class PixyPacket {
		public int X; // 320
		public int Y; // 200
		public int Width;
		public int Height;
		public int Distance;

	}

}
