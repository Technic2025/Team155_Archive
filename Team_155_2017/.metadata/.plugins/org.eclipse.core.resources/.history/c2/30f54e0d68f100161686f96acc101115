package org.usfirst.frc.team155.robot;

import org.usfirst.frc.team155.robot.pixyCamVision.PixyException;
import org.usfirst.frc.team155.robot.pixyCamVision.PixyPacket;

import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.I2C.Port;

public class PixyCamBasic {

		// Warning: if the pixy is plugged in through mini usb, this code WILL NOT
		// WORK b/c the pixy is smart and detects where it should send data
		I2C pixy;
		Port port = Port.kOnboard;
		PixyPacket[] packets; // prep up the array of PixyPacket - KB
		PixyException pExc;
		String print;

		public PixyCamBasic() {
			pixy = new I2C(port, 0x54);
			packets = new PixyPacket[7]; // fill array with 7 PixyPackets - KB
			pExc = new PixyException(print);
		}

		// This method parses raw data from the pixy into readable integers
		public int cvt(byte upper, byte lower) {
			return (((int) upper & 0xff) << 8) | ((int) lower & 0xff);
		}

		// This method gathers data, then parses that data, and assigns the ints to
		// global variables
		// sure would be nice if function protypes were followed..... KB
		// INPUT: -KB
		// -signature -KB
		// OUTPUT: -KB
		// returns a pixypacket on target #signature -KB
		public int readPacket(int Signature,PixyPacket packet[]) throws PixyException {
			int Checksum;
			int Sig;
			int i;
			int syncWord;

			byte[] rawData = new byte[100]; // 32 //set up an array of bytes, grab an
											// array of bytes from pixy -KB
			try {
				if (pixy.readOnly(rawData, 100)) { // 32
				}
			} catch (RuntimeException e) {
			}

			if (rawData.length < 100) { // 32
				System.out.println("byte array length is broken");
				return -1;
			}
			//find a double sync word
			i=0;
			while (true){
				syncWord = cvt(rawData[i + 1], rawData[i + 0]);				//read 2 consecutive bytes
				if (syncWord == 0xaa55){									//is this a syncword?
					syncWord = cvt(rawData[i + 3], rawData[i + 2]);		//read another 2 consecutive bytes
					if (syncWord == 0xaa55)									//is this a syncword?
						break;												//SUCCSESS
				}
				i++;
				if (i==101)				//something went wrong, we found no syncword
					return -2;
			}
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			for (int i = 0; i < 100; i++) { // 32
				int syncWord = cvt(rawData[i + 1], rawData[i + 0]); // Parse first 2
																	// bytes
				//System.out.println(" i syncWord = " + i + " " + syncWord);
				if (syncWord == 0xaa55) { // Check is first 2 bytes equal a
											// "sync word", which indicates the
											// start of a packet of valid data
					syncWord = cvt(rawData[i + 3], rawData[i + 2]); // Parse the
																	// next 2 bytes
					//System.out.println(" i syncWord = " + i + " " + syncWord);
					//System.out.println("second syncWord");
					if (syncWord != 0xaa55) { // Shifts everything in the case that
						System.out.println("second syncWord not found "); // one
																			// syncword
																			// is
																			// sent
						i -= 2; // decrement by 2, but why.... - KB
					}
					// This next block parses the rest of the data
					Checksum = cvt(rawData[i + 5], rawData[i + 4]); // grab the
																	// checksum for
																	// the pixy data
					//System.out.println("Checksum = " + Checksum);
					Sig = cvt(rawData[i + 7], rawData[i + 6]); // Sig is the
																// Signature number
																// from the Pixycam
					//System.out.println("Sig = " + Sig);
					if (Sig <= 0 || Sig > packets.length) {
						break;
					}
					packets[Sig - 1] = new PixyPacket(); // make a new object in the
															// array - KB

					packets[Sig - 1].X = cvt(rawData[i + 9], rawData[i + 8]); // fill
																				// it
																				// with
																				// data
																				// -KB
					//System.out
							//.println("packets[Sig - 1].X = " + packets[Sig - 1].X);
					packets[Sig - 1].Y = cvt(rawData[i + 11], rawData[i + 10]); // fill
																				// it
																				// with
																				// data
																				// -KB
					//System.out
							//.println("packets[Sig - 1].Y = " + packets[Sig - 1].Y);
					packets[Sig - 1].Width = cvt(rawData[i + 13], rawData[i + 12]); // fill
																					// it
																					// with
																					// data
																					// -KB
					//System.out.println("packets[Sig - 1].Width = "
							//+ packets[Sig - 1].Width);
					packets[Sig - 1].Height = cvt(rawData[i + 15], rawData[i + 14]); // fill
																						// it
																						// with
																						// data
																						// -KB
					//System.out.println("packets[Sig - 1].Height = "
							//+ packets[Sig - 1].Height);
					// Compute distance to object

					// Distance=Target(ft- 2 inches wide- 2/12)*FOV(pix -
					// 320)/(2*Target(pix)*tangent(FOV 75degrees by 47 degrees))
					packets[Sig - 1].Distance = (int) (packets[Sig - 1].Width / 12
							* 320 / (2 * packets[Sig - 1].X) * 3.732);
					//System.out.println("packets[Sig - 1].Distance = "
							//+ packets[Sig - 1].Distance);

					// Checks whether the data is valid using the checksum *This if
					// block should never be entered*
					if (Checksum != Sig + packets[Sig - 1].X + packets[Sig - 1].Y
							+ packets[Sig - 1].Width + packets[Sig - 1].Height) {
						packets[Sig - 1] = null; // checksum failed, set position to
													// array to null and throw
													// exception - KB
						throw pExc;
					}
					break;
				}
			}
			// Assigns our packet to a temp packet, then deletes data so that we
			// don't return old data
			PixyPacket pkt = packets[Signature - 1];
			packets[Signature - 1] = null;
			return pkt;
		}

		public class PixyException extends Exception {
			public PixyException(String message) {
				super(message);
			}
		}

		public class PixyPacket {
			public int X; // 320
			public int Y; // 200
			public int Width;
			public int Height;
			public int Distance;

		}

	}

