package org.usfirst.frc.team155.robot;

import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

public class shooter155 {

	robotMap155 robotSystem;
	pixyCamVision camera;

	SmartDashboard sDash;
	// MOTORS FOR COMPEITION ROBOT

	// JOYSTICKS
	Joystick leftStick = new Joystick(robotSystem.LEFTSTICK);
	Joystick rightStick = new Joystick(robotSystem.RIGHTSTICK);
	Joystick dsStick = new Joystick(robotSystem.DSSTICK);
	// MOTORS FOR COMPEITION ROBOT
	public CANTalon shooter;
	public VictorSP indexer;
	public Servo angler;

	public double INDEXSPEED = 1;
	public double STOP = 0;
	
	public double ANGLE1 = 10; // 55degrees
	public double ANGLE2 = 20; // 65degrees
	public double ANGLE3 = 30; // 75degrees
	public double ANGLE4 = 40; // 85degrees
	public double ANGLE5 = 50; // 88degrees

	public double SLOPE1 = 10;
	public double SLOPE2 = 20;
	public double SLOPE3 = 30;
	public double SLOPE4 = 40;
	public double SLOPE5 = 50;

	public double INT1 = 10;
	public double INT2 = 20;
	public double INT3 = 30;
	public double INT4 = 40;
	public double INT5 = 50;

	public double RANGELOW = 10; // 55degrees
	public double RANGE1 = 20; // 65degrees
	public double RANGE2 = 30; // 75degrees
	public double RANGEMAX = 40; // 85degrees

	// DRIVE ENCODERS
	public CANTalon shooter_Encoder;
	public double distance;
	public boolean targetSeen;
	public boolean readyFire;
	public boolean uptoSpeed;
	public boolean atAngle;
	public double setAngle;
	public double setSlope;
	public double setInt;
	public double targetSpeed;
	public boolean readytoFire = false;
	public double currentSpeed;
	public double tol=10;

	public final int STOPFIRE = 0;
	public final int LOOKFORTARGET = 1;
	public final int PREPFIRE = 2;
	public final int READYTOFIRE = 3;
	
	public final int HOLD = 0;
	public final int PREFIRE = 1;
	public final int FIRE = 2;
	
	
	public int state = 0;
	public int shooterstate=0;

	double startTimeShooter;
	double motorTime;
	final double LONG = 1;
	final double SHORT =.25;
	//arduino control pins
		public DigitalOutput ard_0;
		public DigitalOutput ard_1;
		public DigitalOutput ard_2;
	
	
	
	
	
	
	public shooter155(robotMap155 robot, pixyCamVision cameraSystem) {
		robotSystem = robot;
		camera = cameraSystem;
		shooter = new CANTalon(robotSystem.SHOOTER);
		indexer = new VictorSP(robotSystem.INDEXER);
		angler = new Servo(robotSystem.SHOOTERANGLE);
		StringBuilder _sb = new StringBuilder();
		ard_0=new DigitalOutput(robotSystem.ARDUINO_0);
		ard_1=new DigitalOutput(robotSystem.ARDUINO_1);
		ard_2=new DigitalOutput(robotSystem.ARDUINO_2);

		/* first choose the sensor */
		shooter.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
		shooter.reverseSensor(false);
        //shooter.configEncoderCodesPerRev(XXX), // if using FeedbackDevice.QuadEncoder
        //shooter.configPotentiometerTurns(XXX), // if using FeedbackDevice.AnalogEncoder or AnalogPot
		

        /* set the peak and nominal outputs, 12V means full */
		shooter.configNominalOutputVoltage(+0.0f, -0.0f);
        shooter.configPeakOutputVoltage(+12.0f, -12.0f);
        /* set closed loop gains in slot0 */
        shooter.setProfile(0);
        shooter.setF(0.1097);
        shooter.setP(0.22);
        shooter.setI(0); 
        shooter.setD(0);
	
		
		// shooterMotor =
		// shooter_Encoder = shooterMotor.getSpeed() ;

		// If shooter button pushed,lineup to target and then get distance
		// d = Target height ft*FOV height pixel/(2*Target height pixel*tan) - FOV = 75 vert X 47 hor
		// d = 4in/12*200/(2*THp*16.12)

	}
	public void run(){
		if(dsStick.getRawButton(robotSystem.SHOOTMODE)){
				automaticShooter();}
		else manualShooter();
		
	}
	
	
	public void automaticShooter() {
		 //targetSeen = camera.seeTarget();
		 //distance = camera.shooterdistance();

		switch (state) {

		case STOPFIRE: {// Driving around don't care about shooting. Stop motors
			if (leftStick.getRawButton(robotSystem.FIRE)) {
				state = LOOKFORTARGET;
			}
		}

		case LOOKFORTARGET: {// Driver Press button to go into shooting mode can
								// drive until a target is seen
			if (!leftStick.getRawButton(robotSystem.FIRE)) {
				state = STOPFIRE;
			}
			if (targetSeen) {
				state = PREPFIRE;
			}

		}
		case PREPFIRE: {// Locks out Driver moves robot to location and sets
						// motorspeeds and angles. fires when ready
			//Sets Constants for Angle and Target Speeds
			if (distance >= RANGEMAX) {
				setAngle = ANGLE1;
				setInt = INT1;
				setSlope = SLOPE1;

			} else if (distance > RANGELOW && distance <= RANGE1) {
				setAngle = ANGLE4;
				setInt = INT4;
				setSlope = SLOPE4;
			} else if (distance > RANGE1 && distance <= RANGE2) {
				setAngle = ANGLE3;
				setInt = INT3;
				setSlope = SLOPE3;
			} else if (distance > RANGE2 && distance <= RANGEMAX) {
				setAngle = ANGLE2;
				setInt = INT2;
				setSlope = SLOPE2;
			} else {
				setAngle = ANGLE5;
				setInt = INT5;
				setSlope = SLOPE5;
			}

			angler.set(setAngle);
			targetSpeed = setSlope * distance + setInt;
			uptoSpeed = setShooter(targetSpeed);
			

			if (uptoSpeed) {
				indexer.set(INDEXSPEED);
			}

			if (!leftStick.getRawButton(robotSystem.FIRE)) {
				state = STOPFIRE;
			}
		}

		}

	}// ends function
	
	public boolean setShooter(double speed){
		
           	shooter.changeControlMode(TalonControlMode.Speed);
        	shooter.set(speed); 
        	currentSpeed = shooter.getEncVelocity();
        	
        	if((currentSpeed >= speed-tol) &&(currentSpeed<= speed+tol))
        		readytoFire =true;
        	else readytoFire = false;
				
		return readytoFire; 
	}
	
	public void stopShooter(){
		
		shooter.changeControlMode(TalonControlMode.PercentVbus);
    	shooter.set(0);
			
	
}
	
public void fullShooter(){
		
		shooter.changeControlMode(TalonControlMode.PercentVbus);
    	shooter.set(1);
			
	
}
	
	public void manualShooter(){
		
		switch (shooterstate){
		case HOLD:
			indexer.set(STOP);
			stopShooter();
			
			
			if (leftStick.getRawButton(robotSystem.SHOOTER_ON))
			{
				startTimeShooter = Timer.getFPGATimestamp();
				state = PREFIRE;
				motorTime=LONG;
			}
			break;

		case PREFIRE:
			fullShooter();
			
			// Check if ready to fire(Motor up to speed)
			if (leftStick.getRawButton(robotSystem.FIRE)&&Timer.getFPGATimestamp() - startTimeShooter > motorTime) {
				state = FIRE;
				startTimeShooter = Timer.getFPGATimestamp();
			}

			if (rightStick.getRawButton(robotSystem.SHOOTER_OFF))
				state = HOLD;

			//autoLift(SHOOTINGHEIGHT); // lifts arm to catch from human loader
			indexer.set(STOP);
			
			break;
			
		case FIRE:
			if (Timer.getFPGATimestamp() - startTimeShooter > SHORT){
				state = PREFIRE;
						
			}
			indexer.set(INDEXSPEED);
			fullShooter();
			
			break;

		}
	

	if(dsStick.getRawButton(robotSystem.ANGLEUP)){
		setAngle = ANGLE5;
	}
	if(dsStick.getRawButton(robotSystem.ANGLEDOWN)){
		setAngle = ANGLE1;
	}	
		
	if (!rightStick.getRawButton(robotSystem.SHOOTER_OFF)) {
		state = HOLD;
	}
	angler.set(setAngle);
}
		
	
	
	
	
	public void modeSelect(boolean ball, boolean motor, boolean fire){
		int total=0;
		
		if (ball)
			total=total+4;
		if (motor)
			total=total+2;
		if (fire)
			total=total+1;
		
		switch (total){		//ball		motor	fire
		case 0:				//false		false	false
			setColorMode(0);
			break;			//ball		motor	fire
		case 1:				//false		false	true
			
			break;			//ball		motor	fire
		case 2:				//false		true	false
			setColorMode(5);
			break;			//ball		motor	fire
		case 3:				//false		true	true
			setColorMode(4);
			break;			//ball		motor	fire
		case 4:				//true		false	false
			setColorMode(1);
			break;			//ball		motor	fire
		case 5:				//true		false	true
			
			break;			//ball		motor	fire
		case 6:				//true		true	false
			setColorMode(2);
			break;			//ball		motor	fire
		case 7:				//true		true	true
			setColorMode(3);
			break;			//ball		motor	fire
			
		}
		
	}
	
	public void setColorMode(int colormode){
//		System.out.println("colormode =" + (colormode));
		switch (colormode){
		case 0:					//no ball
			ard_0.set(false);
			ard_1.set(false);
			ard_2.set(false);
//			System.out.println("trying 0");	
			break;
		case 1:					//have ball
			ard_0.set(true);
			ard_1.set(false);
			ard_2.set(false);
//			System.out.println("trying 1");
			break;
		case 2:					//shooter not up to speed
			ard_0.set(false);
			ard_1.set(true);
			ard_2.set(false);
//			System.out.println("trying 2");
			break;
		case 3:					//shooter up to speed and have ball
			ard_0.set(true);
			ard_1.set(true);
			ard_2.set(false);
//			System.out.println("trying 3");
			break;
		case 4:				//shooter up to speed and no ball
			ard_0.set(false);
			ard_1.set(false);
			ard_2.set(true);
//			System.out.println("trying 4");
			break;
		case 5:				//shooter on and no ball
			ard_0.set(true);
			ard_1.set(false);
			ard_2.set(true);
//			System.out.println("trying 5");
			break;
		case 6:				//climb mode
			ard_0.set(false);
			ard_1.set(true);
			ard_2.set(true);
//			System.out.println("trying 6");
			break;
		case 7:				//disabled	
			ard_0.set(true);
			ard_1.set(true);
			ard_2.set(true);
//			System.out.println("trying 7");
			break;
		
		
		}
		
		
	}
}
