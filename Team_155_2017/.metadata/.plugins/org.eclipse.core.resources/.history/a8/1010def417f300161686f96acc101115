package org.usfirst.frc.team155.robot;

import org.opencv.core.Rect;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc.team155.robot.pixyCamVision.PixyException;
//import org.usfirst.frc.team155.robot.pixyCamVision.PixyPacket;
import org.usfirst.frc.team155.robot.PixyPacket;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.I2C.Port;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.VisionThread;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	final String defaultAuto = "Straight";
	final String leftAuto = "Left Side";
	final String rightAuto = "Right Side";

	String autoSelected;
	SendableChooser<String> chooser = new SendableChooser<>();

	// I2C I2CBus;
	// int cX = 0, cY = 0, cWidth = 0, cHeight = 0;
	// byte[] compBuffer = new byte[8];

	// public VisionThread visionThread;
	public Drive155 drive;
	public gear155 gear;
	public robotMap155 robotSystem;
	public PixyCamBasic pixyCam;
	// public final Object imgLock = new Object();
	// public static final int IMG_WIDTH = 640;
	// public static final int IMG_HEIGHT = 480;

	Joystick translateStick = new Joystick(0);
	Joystick rotateStick = new Joystick(1);
	Joystick shooterStick = new Joystick(2);
	public DigitalInput gearSwitch1;
	public DigitalInput gearSwitch2;
	public Victor shooter;
	public double speed;
	public int hold;

	int i, j;
	int returnVal;
	PixyPacket[] pixyBlock;
	
	// public boolean holdPrevious;

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		pixyCam = new PixyCamBasic();
		chooser.addDefault("Default Auto", defaultAuto);
		chooser.addObject("My Auto", rightAuto);
		chooser.addObject("My Auto", leftAuto);
		SmartDashboard.putData("Auto choices", chooser);

		shooter = new Victor(4);
		speed = 0;
		hold = 0;
		PixyPacket[] pixyBlock =  new PixyPacket[16];
		//for (int i=0;i<=15;i++){
		//	pixyBlock[i]=new PixyPacket();

		//}
		
		

		// I2CBus = new I2C(I2C.Port.kOnboard, 0x55);

		// holdPrevious = false;
		// CameraServer.getInstance().startAutomaticCapture();
		// UsbCamera camera =
		// CameraServer.getInstance().startAutomaticCapture();
		// camera.setResolution(IMG_WIDTH, IMG_HEIGHT);

		/*
		 * This code calculates the center of the 2 rectangles. CenterX defines
		 * the centers of both rectangles and finds the centers of both
		 * rectangles together (midpoint)
		 */
		// visionThread = new VisionThread(camera,new GripPipeline(), pipeline
		// -> {
		// if(!pipeline.filterContoursOutput().isEmpty()){
		// Rect centerL =
		// Imgproc.boundingRect(pipeline.filterContoursOutput().get(0));
		// Rect centerR =
		// Imgproc.boundingRect(pipeline.filterContoursOutput().get(1));
		// //synchronized (imgLock) {
		// centerX =
		// ((centerL.x+centerL.width/2)+(centerR.x+centerR.width/2))/2;
		// }
		// visionThread.start();
		robotSystem = new robotMap155();
		drive = new Drive155(translateStick, rotateStick, robotSystem);
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		autoSelected = chooser.getSelected();
		// autoSelected = SmartDashboard.getString("Auto Selector",
		// defaultAuto);
		System.out.println("Auto selected: " + autoSelected);

		drive.roboGyro.reset();

		j = 0;
		/*
		 * try { System.out.println("Reading PixyCam"); pixyValues =
		 * pixyCam.readPacket(1); System.out.println("PixyCam X = " +
		 * pixyValues.X); System.out.println("PixyCam Y = " + pixyValues.Y);
		 * System.out.println("PixyCam Width = " + pixyValues.Width);
		 * System.out.println("PixyCam Height = " + pixyValues.Height);
		 * System.out.println("PixyCam Distance = " + pixyValues.Distance);
		 * 
		 * 
		 * } catch (PixyException e) { // TODO Auto-generated catch block
		 * e.printStackTrace(); }
		 */
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
/*
		PixyPacket pixyValues;
		I2C pixy;
		pixy = new I2C(Port.kOnboard, 0x54);
		byte[] rawData = new byte[32];
		int[] words = new int[16];
*/
		j++;
		// if (j==10) {
		j = 0;
		/*
		try {
			// System.out.println("trying..");
			if (!pixy.readOnly(rawData, 32)) { // 32
				System.out.println("new read of 32, try: " + j);
				for (i = 0; i < 16; i++) {
					// if (rawData[2*i+1]!=0 && rawData[2*i]!=0)
					System.out.println(" " + rawData[2 * i + 1] + " "
							+ rawData[2 * i]);
				}

			} else {
				// System.out.println("failed new read of 32, try: " + j);
				// if (rawData[2*i+1]!=0 && rawData[2*i]!=0)
				System.out.println(" " + (rawData[0] & 0xFFL) + " "
						+ (rawData[1] & 0xFFL) + " " + (rawData[2] & 0xFFL)
						+ " " + (rawData[3] & 0xFFL) + " "
						+ (rawData[4] & 0xFFL) + " " + (rawData[5] & 0xFFL)
						+ " " + (rawData[6] & 0xFFL) + " "
						+ (rawData[7] & 0xFFL) + " " + (rawData[8] & 0xFFL)
						+ " " + (rawData[9] & 0xFFL) + " "
						+ (rawData[10] & 0xFFL) + " " + (rawData[11] & 0xFFL)
						+ " " + (rawData[12] & 0xFFL) + " "
						+ (rawData[13] & 0xFFL) + " " + (rawData[14] & 0xFFL)
						+ " " + (rawData[15] & 0xFFL) + " "
						+ (rawData[16] & 0xFFL) + " " + (rawData[17] & 0xFFL)
						+ " " + (rawData[18] & 0xFFL) + " "
						+ (rawData[19] & 0xFFL) + " " + (rawData[20] & 0xFFL)
						+ " " + (rawData[21] & 0xFFL) + " "
						+ (rawData[22] & 0xFFL) + " " + (rawData[23] & 0xFFL)
						+ " " + (rawData[24] & 0xFFL) + " "
						+ (rawData[25] & 0xFFL) + " " + (rawData[26] & 0xFFL)
						+ " " + (rawData[27] & 0xFFL) + " "
						+ (rawData[28] & 0xFFL) + " " + (rawData[29] & 0xFFL)
						+ " " + (rawData[30] & 0xFFL) + " "
						+ (rawData[31] & 0xFFL));
			}

		} catch (RuntimeException e) {
		}*/

		//PixyPacket pixyValues;
		returnVal=-3;		//assume error
		try {
			//System.out.println("Reading PixyCam");
			
			
			returnVal = pixyCam.readPacket(1,pixyBlock);
			//if (pixyValues!=null){
			//	System.out.println("try for block1: " +pixyValues.X + " " + pixyValues.Y+ " " +pixyValues.Width+ " " +pixyValues.Height);
			//}
			//System.out.println("PixyCam X = " + pixyValues.X);
			//System.out.println("PixyCam Y = " + pixyValues.Y);
			//System.out.println("PixyCam Width = " + pixyValues.Width);
			//System.out.println("PixyCam Height = " + pixyValues.Height);
			//System.out.println("PixyCam Distance = " + pixyValues.Distance);

		} catch (PixyException e) { // TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if (returnVal>0){
			for (i=0;i<returnVal;i++){
				System.out.println("block " +i+"X: " +pixyBlock[i].X +"Y: " +pixyBlock[i].Y +"Width: " + pixyBlock[i].Width+"Height: " +pixyBlock[i].Height );
			}
		} else {
			System.out.println("error: " + returnVal);
		}

		switch (autoSelected) {
		case leftAuto:
			// go straight then make right turn
			// drive.myrobot.mecanumDrive_Polar(.5, 0, 45);
			break;
		case rightAuto:
			// go straight then make left turn
			// myrobot.mecanumDrive_Polar(Speed, direction, rotation);
			// drive.myrobot.mecanumDrive_Polar(.5, 0, -45);
			break;
		case defaultAuto:
			// go straight
			// drive.myrobot.mecanumDrive_Polar(.5, 0, 0);
			// if (gear.gearPusherAuto()){
			// drive.myrobot.mecanumDrive_Polar(-.5, 0, 0);
			// }
			break;
		}

	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		// shooter.setSpeed(shooterStick.getY());
		// System.out.println("speed = " + shooter.getSpeed());

		/*
		 * holdPrevious = hold;
		 * 
		 * if (shooterStick.getRawButton(4)){ hold = true; }
		 * 
		 * if (shooterStick.getRawButton(5)){ hold = false; }
		 * 
		 * if ((holdPrevious == false) & (hold == true)){ speed =
		 * (shooterStick.getY()); }
		 * 
		 * if(hold == false){ speed = (shooterStick.getY()); }
		 */

		drive.run();
		// System.out.println("hold = " + hold + " motor speed = " +
		// shooter.getSpeed() + " speed = " + speed);
		// System.out.println("CenterX = " + (centerX));
		// System.out.println("Center rect1 = " + (centerL.x+centerL.width/2));
		// System.out.println("Center rect2 = " + (centerR.x+centerR.width/2));
		// shooter.setSpeed(shooterStick.getY());
		// System.out.println("speed = " + shooter.getSpeed());
		switch (hold) {
		case 0: {
			// user operated
			// System.out.println("state 0");
			shooter.setSpeed(shooterStick.getY());
			if (shooterStick.getRawButton(4)) {
				speed = shooterStick.getY();
				hold = 1;
			}
			break;
		}
		case 1: {
			// hold speed at current or set speed
			// System.out.println("state 1");
			shooter.setSpeed(speed);
			// return to case 0 and forget current set speed
			if (shooterStick.getRawButton(5)) {
				hold = 0;
			}
			if (shooterStick.getRawButton(7)) {
				hold = 2;
			}
			break;
		}
		case 2: {
			// stop shooter to resume set speed (on return to case 1)
			// System.out.println("state 2");
			shooter.setSpeed(0);
			if (shooterStick.getRawButton(5)) {
				hold = 0;
			}
			if (shooterStick.getRawButton(6)) {
				hold = 1;
			}
			break;
		}
		}
	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
	}

}


