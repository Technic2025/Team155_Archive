package org.usfirst.frc.team155.robot;

import org.opencv.core.Rect;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc.team155.robot.pixyCamVision.PixyException;
import org.usfirst.frc.team155.robot.pixyCamVision.PixyPacket;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.VisionThread;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	final String defaultAuto = "Straight";
	final String leftAuto = "Left Side";
	final String rightAuto = "Right Side";
	
	String autoSelected;
	SendableChooser<String> chooser = new SendableChooser<>();
	
//	I2C I2CBus; 
//	int cX = 0, cY = 0, cWidth = 0, cHeight = 0;
//	byte[] compBuffer = new byte[8]; 

	
	//public VisionThread visionThread;
	public Drive155 drive;
	public gear155 gear;
	public robotMap155 robotSystem;
	public pixyCamVision pixyCam;
	//public final Object imgLock = new Object();
	//public static final int IMG_WIDTH = 640;
	//public static final int IMG_HEIGHT = 480;

	
	Joystick translateStick = new Joystick(0);
	Joystick rotateStick = new Joystick(1);
	Joystick shooterStick = new Joystick(2);
	public DigitalInput gearSwitch1;
	public DigitalInput gearSwitch2;
	public Victor shooter;
	public double speed;
	public int hold;
	//public boolean holdPrevious;
	
	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		pixyCam = new pixyCamVision();
		chooser.addDefault("Default Auto", defaultAuto);
		chooser.addObject("My Auto", rightAuto);
		chooser.addObject("My Auto", leftAuto);
		SmartDashboard.putData("Auto choices", chooser);
		
		shooter = new Victor(4);
		speed = 0;
		hold = 0;
		
	//		I2CBus = new I2C(I2C.Port.kOnboard, 0x55); 
		
		//holdPrevious = false;
		//CameraServer.getInstance().startAutomaticCapture();
		//UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
		//camera.setResolution(IMG_WIDTH, IMG_HEIGHT);
		
		/*
		 This code calculates the center of the 2 rectangles.
		  CenterX defines the centers of both rectangles and finds the centers of both rectangles together (midpoint)
		 */
		//visionThread = new VisionThread(camera,new GripPipeline(), pipeline -> {
		//if(!pipeline.filterContoursOutput().isEmpty()){
		//	Rect centerL = Imgproc.boundingRect(pipeline.filterContoursOutput().get(0));
		//	Rect centerR = Imgproc.boundingRect(pipeline.filterContoursOutput().get(1));
		//	//synchronized (imgLock) {
		//		centerX = ((centerL.x+centerL.width/2)+(centerR.x+centerR.width/2))/2;
		//		}
		//visionThread.start();
		robotSystem = new robotMap155();
		drive = new Drive155(translateStick,rotateStick,robotSystem);
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		autoSelected = chooser.getSelected();
		// autoSelected = SmartDashboard.getString("Auto Selector",
		// defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
		
		drive.roboGyro.reset();
		
		PixyPacket pixyValues;

		
			try {
			System.out.println("Reading PixyCam");
			pixyValues = pixyCam.readPacket(1);
			System.out.println("PixyCam X = " + pixyValues.X);
			System.out.println("PixyCam Y = " + pixyValues.Y);
			System.out.println("PixyCam Width = " + pixyValues.Width);
			System.out.println("PixyCam Height = " + pixyValues.Height);
			System.out.println("PixyCam Distance = " + pixyValues.Distance);

			
		} catch (PixyException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {

	/*	PixyPacket pixyValues;

		try {
			System.out.println("Reading PixyCam");
			pixyValues = pixyCam.readPacket(1);
			System.out.println("PixyCam X = " + pixyValues.X1);
			System.out.println("PixyCam Y = " + pixyValues.Y1);
			System.out.println("PixyCam Width = " + pixyValues.Width1);
			System.out.println("PixyCam Height = " + pixyValues.Height1);
			System.out.println("PixyCam Distance = " + pixyValues.Distance1);

			
		} catch (PixyException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} */

		
		switch (autoSelected) {
		case leftAuto:
			// go straight then make right turn
			//drive.myrobot.mecanumDrive_Polar(.5, 0, 45);
			break;
		case rightAuto:
			// go straight then make left turn
			//myrobot.mecanumDrive_Polar(Speed, direction, rotation);
			//drive.myrobot.mecanumDrive_Polar(.5, 0, -45);
			break;
		case defaultAuto:
			// go straight
		//	drive.myrobot.mecanumDrive_Polar(.5, 0, 0);
			//if (gear.gearPusherAuto()){
			//	drive.myrobot.mecanumDrive_Polar(-.5, 0, 0);
			//}
			break;
		}	
		
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
	//	shooter.setSpeed(shooterStick.getY());
	//	System.out.println("speed = " + shooter.getSpeed());
	
		/*holdPrevious = hold;
		
		if (shooterStick.getRawButton(4)){
			hold = true;
		}
		
		if (shooterStick.getRawButton(5)){
			hold = false;
		}
		
		if ((holdPrevious == false) & (hold == true)){
			speed = (shooterStick.getY());
		}
		
		if(hold == false){
			speed = (shooterStick.getY());
		}*/
		
		drive.run();
	//System.out.println("hold = " + hold + " motor speed = " + shooter.getSpeed() + " speed = " + speed);
	//System.out.println("CenterX = " + (centerX));
	//System.out.println("Center rect1 = " + (centerL.x+centerL.width/2));
	//System.out.println("Center rect2 = " + (centerR.x+centerR.width/2));
//	shooter.setSpeed(shooterStick.getY());
	//System.out.println("speed = " + shooter.getSpeed());
	switch(hold){
		case 0: {
			//user operated
			//System.out.println("state 0");
			shooter.setSpeed(shooterStick.getY());
			if (shooterStick.getRawButton(4)){
				speed=shooterStick.getY();
				hold=1;	
			}	
			break;
			}
		case 1: {
			//hold speed at current or set speed
			//System.out.println("state 1");
			shooter.setSpeed(speed);
			//return to case 0 and forget current set speed
			if (shooterStick.getRawButton(5)){	
				hold=0;
			}
			if (shooterStick.getRawButton(7)){
				hold=2;
			}
			break;
			}
		case 2: {
			//stop shooter to resume set speed (on return to case 1)
			//System.out.println("state 2");
			shooter.setSpeed(0);
			if (shooterStick.getRawButton(5)){
				hold=0;
			}
			if (shooterStick.getRawButton(6)){
				hold=1;
			}
			break;
			}
		}
	}
	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
	}
	
	
}

