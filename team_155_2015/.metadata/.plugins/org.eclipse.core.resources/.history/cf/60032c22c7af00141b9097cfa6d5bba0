package org.usfirst.frc.team155.robot;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Autonomous {

	DRIVE155 robotDrive;
	Lift155 robotLift;
	robotMap155 robotMap;
	CameraThread robotVision;
	//Vision155 robotVision;

	// arcade state
	final int DRIVE0 = 0;
	final int TURN180 = 1;
	final int DRIVE180 = 2;
	final int LIFT_TOTE = 3;

	// Mech mode 1
	final int DRIVEFORWARD1 = 0;
	final int LIFTTOTE1 = 1;
	final int DRIVEBACK1 = 2;
	final int DRIVESIDE1 = 3;
	final int STOP1 = 4;
	int BOX_COUNTER = 0;
	// mecanum state
	final int DRIVEBACK = 0;
	final int DRIVESIDE = 1;
	final int DRIVEFOWARD = 2;
	final int STOP = 3;
	public int state = 0;
	public boolean TOTE_SWITCH = false;
	public double startTimeDRIVE;
	boolean readyToCarry = false;
	DigitalInput toteSwitch;
	// start 
	final int START2 = 0;
	final int WAIT2 = 1;
	final int FIRSTTOTE2 = 2;
	final int LIFTTOTE2 = 3;
	final int DRIVEFORWARD2 = 4;
	final int TURN90 = 5;
	final int DRIVESTRAIGHT2 = 6;
	final int STOP2 =7;

	//public Autonomous(DRIVE155 drive, Lift155 lift, robotMap155 robot, Vision155 vision) {
	public Autonomous(DRIVE155 drive, Lift155 lift, robotMap155 robot, CameraThread vision) {
		robotDrive = drive;
		robotLift = lift;
		robotMap = robot;
		robotVision = vision;
	}

	public void run() {
		double speed;
		double heading = 0;
		if (robotLift.measureDistance() > 36) {
			speed = .5;
		} else
			speed = 0;
		// robotLift.measureDistance();
		robotDrive.driveStraight(heading, speed);
	}
	
	public void centerTote(){
	if (robotVision.hasFoundTote())	
		robotDrive.centerYellowTote(300, 0, robotVision.getTotePosition());
		
	else robotDrive.mecanumstop();	
	SmartDashboard.putBoolean("foundtote", robotVision.hasFoundTote());
	}

	public void driveToAutoZone(){
		double distance = 84;
		if (robotDrive.DriveStraightDistance(distance))
			{
			//robotDrive.PIDDisable();
			//robotDrive.mecanumstop();
			}
		else
		robotDrive.DriveStraightDistance(distance);
		
	}
	
	public void driveToTote(){
		double midPoint = -40;
		double finalPoint = -80;
		double fullSpeed = -.25;
		double slowSpeed = -.125;
		double speed;
		
		if (robotDrive.EncoderDistance()> midPoint)
			speed = fullSpeed;
		else if (robotDrive.EncoderDistance()> finalPoint)
			speed = slowSpeed;
		else speed = 0;
		
			
		if (robotVision.hasFoundTote())	
			robotDrive.centerYellowTote(300, speed, robotVision.getTotePosition());
			
		else robotDrive.mecanumstop();	
		SmartDashboard.putBoolean("foundtote", robotVision.hasFoundTote());	
	}
	public boolean driveToToteRangeFinder(){
		double midPoint = -40;
		double finalPoint = -80;
		double fullSpeed = -.25;
		double slowSpeed = -.125;
		double speed;
		double toteDistance;
		boolean reachTote = false;
		
		toteDistance = robotLift.measureDistance();
		if (toteDistance> midPoint)
			{speed = fullSpeed;	
			if (robotVision.hasFoundTote())	
				robotDrive.centerYellowTote(300, speed, robotVision.getTotePosition());
			
			else robotDrive.mecanumstop();	
			SmartDashboard.putBoolean("foundtote", robotVision.hasFoundTote());	
			}
		else if (toteDistance> finalPoint)
			speed = slowSpeed;
		else {speed = 0;
		reachTote = true;}
			
		
		
		return reachTote;
		
	}
	
	public void autoMode() {
		double speed = 0;
		double heading = 0;
		double direction = 90;

		switch (state) {
		case DRIVEFORWARD1:
			
			
			
			break;
		case LIFTTOTE1:
			speed = 0;
			heading = 0;
			direction = 90;
			double carryHeight;
			// lift the tote
								
				if (readyToCarry == false) {
					carryHeight=robotLift.GROUND_LEVEL;
					if (robotLift.onTarget() == true)
						readyToCarry = true;
				}
				else 
					carryHeight=robotLift.CARRY_BOX;
				if ((readyToCarry==true)&&(robotLift.onTarget())&&(carryHeight==robotLift.CARRY_BOX))
						state = DRIVEFORWARD1;
				robotLift.autoLift(carryHeight);
			
			break;
		case DRIVEBACK1:
			speed = .5;
			heading = 0;
			direction = 270;
			if ((Timer.getFPGATimestamp()) - (startTimeDRIVE) > .5) {
				state = DRIVESIDE1;
				startTimeDRIVE = Timer.getFPGATimestamp();
			}
			break;
		case DRIVESIDE1:
			speed = .5;
			heading = 0;
			direction = 180;
			if ((Timer.getFPGATimestamp()) - (startTimeDRIVE) > 1)
				if (robotLift.measureDistance() <= 36) {
					state = DRIVEFORWARD1;
				}

			break;
		case STOP1:
			speed = 0;
			heading = 0;
			direction = 180;
			break;
		}
		robotDrive.driveMecanum(heading, speed, direction);

	}

	public void autoForward() {
		double speed = 0;
		double heading = 0;
		double direction = 0;

		switch (state) {
		case DRIVEFOWARD:
			speed = .5;
			heading = 0;
			direction = 90;
			if (robotLift.measureDistance() <= 36) {
				state = TURN180;
			}
			break;
		case DRIVEBACK:
			speed = .5;
			heading = 0;
			direction = 180;
			if (Math.abs(robotDrive.roboGyro.getAngle() - 180) <= 5) {
				state = DRIVE180;
			}
			break;
		case DRIVESIDE:
			speed = .5;
			heading = 0;
			direction = 90;
			if (robotLift.measureDistance() <= 36) {
				state = STOP;
			}
			break;
		case STOP:
			speed = 0;
			heading = 0;
			break;
		}
		robotDrive.driveMecanum(heading, speed, direction);
	}
	
	public void autoLine() {
		double speed = 0;
		double heading = 0;
		double direction = 90;
		
		
		switch (state) {
		case START2:
			startTimeDRIVE = Timer.getFPGATimestamp();
			state = WAIT2;
		case WAIT2:
			speed = 0;
			heading = 0;
			direction = 90;
			robotDrive.driveMecanum(heading, speed, direction);
			if ((Timer.getFPGATimestamp()) - (startTimeDRIVE) > 1) {
				state = FIRSTTOTE2;
				startTimeDRIVE = Timer.getFPGATimestamp();
			}
			break;
		case FIRSTTOTE2:
			heading = 0;
			direction = 90;
			if (robotLift.measureDistance()>= 3){
				speed = 0;
				state = LIFTTOTE2;
			} else 
				speed = .25;
			robotDrive.driveMecanum(heading, speed, direction);
			startTimeDRIVE = Timer.getFPGATimestamp();
			SmartDashboard.putNumber("RangeFinderDistance", robotLift.measureDistance());
			break;	
			
		
		case LIFTTOTE2:
		speed = 0;
		heading = 0;
		direction = 90;
		double carryHeight;
		// lift the tote
			/*				
			if (readyToCarry == false) {
				carryHeight=robotLift.GROUND_LEVEL;
				if (robotLift.onTarget() == true)
					readyToCarry = true;
			}
			else 
				carryHeight=robotLift.CARRY_BOX;
			if ((readyToCarry==true)&&(robotLift.onTarget())&&(carryHeight==robotLift.CARRY_BOX))
					{
				if (BOX_COUNTER<3)
				state = DRIVEFORWARD2;
				else state = TURN90;
					}
			
			robotLift.autoLift(carryHeight);
		*/
		
		//Pauses code to simulate lift
			if ((Timer.getFPGATimestamp()) - (startTimeDRIVE) > 4)
			{
				if (BOX_COUNTER<3)
					state = DRIVEFORWARD2;
				else state = TURN90;
			}
			
		break;
				
		case DRIVEFORWARD2:
			BOX_COUNTER++;
			driveToToteRangeFinder();
			if (driveToToteRangeFinder())
				state = LIFTTOTE2;
			startTimeDRIVE = Timer.getFPGATimestamp();
			break;
			
		case TURN90:
			speed = 0;
			heading = 0;
			direction = 180;
			if ((Timer.getFPGATimestamp()) - (startTimeDRIVE) > 1)
				if (robotLift.measureDistance() <= 36) {
					state = DRIVEFORWARD2;
				}

			break;
			
			
		case DRIVESTRAIGHT2:
			robotDrive.DriveStraightDistance(84);
			if (robotDrive.DriveStraightDistance(84))
				state = STOP2;
			
			
			break;
		case STOP2:
			speed = 0;
			heading = 0;
			direction = 180;
			break;
		}
		

	}
	public void displayRangeFinder(){
		SmartDashboard.putNumber("RangeFinderDistance", robotLift.measureDistance());

	
	}	
}
