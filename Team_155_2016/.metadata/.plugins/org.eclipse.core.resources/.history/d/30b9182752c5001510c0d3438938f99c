
package org.usfirst.frc.team155.robot;

import edu.wpi.first.wpilibj.IterativeRobot;
//import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.Joystick;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    final String defaultAuto = "Default";
    final String customAuto = "My Auto";
    String autoSelected;
    SendableChooser chooser;
    
    public final int DRIVE_LEFT_1 = 0;
    public final int DRIVE_LEFT_2 = 1;
    public final int DRIVE_RIGHT_1 = 2;
    public final int DRIVE_RIGHT_2 = 3;
    public final int SHOOTER_MOTOR = 4;
    
    public Joystick leftStick;
    public Joystick rightStick;
    public Joystick shooterStick;
    
    public Victor leftDrive1;
    public Victor leftDrive2;
    public Victor rightDrive1;
    public Victor rightDrive2;
    public Victor shooterMotor;
    
    public double speed=0;
    public boolean set_speed=false;
    public boolean shoot=false;
    public boolean buttonShootPrev=false;
    public boolean buttonSetPrev=false;
    
    //public boolean shoot=false;
    
    
    
    
   
	
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("My Auto", customAuto);
        SmartDashboard.putData("Auto choices", chooser);
        
        leftDrive1 = new Victor(DRIVE_LEFT_1);
        leftDrive2 = new Victor(DRIVE_LEFT_2);
        rightDrive1 = new Victor(DRIVE_RIGHT_1);
        rightDrive2 = new Victor(DRIVE_RIGHT_2);
        shooterMotor = new Victor(SHOOTER_MOTOR);
        
        leftStick = new Joystick(0);
        rightStick = new Joystick(1);
        shooterStick = new Joystick(2);
    }
    
	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString line to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the switch structure below with additional strings.
	 * If using the SendableChooser make sure to add them to the chooser code above as well.
	 */
    public void autonomousInit() {
    	autoSelected = (String) chooser.getSelected();
//		autoSelected = SmartDashboard.getString("Auto Selector", defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	switch(autoSelected) {
    	case customAuto:
        //Put custom auto code here   
            break;
    	case defaultAuto:
    	default:
    	//Put default auto code here
            break;
    	}
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        leftDrive1.set(-leftStick.getY());
        leftDrive2.set(-leftStick.getY());
        rightDrive1.set(rightStick.getY());
        rightDrive2.set(rightStick.getY());
        

        
        if (set_speed)
        	speed=shooterStick.getY();

        if (shoot)
        	shooterMotor.set(speed);
        else
        	shooterMotor.set(0);
        
        System.out("speed is set to ");
        
        //toggle to set speed
        if (shooterStick.getRawButton(7)&& (buttonSetPrev=false))
        	set_speed = !set_speed;
        
        buttonSetPrev=shooterStick.getRawButton(7);
        
        //toggle to shoot
        if (shooterStick.getRawButton(8)&& (buttonShootPrev=false))
        	shoot = !shoot;
        
        buttonShootPrev=shooterStick.getRawButton(8);
        
        
    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    
    }
    
}
